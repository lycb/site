{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport matter from 'gray-matter';\nimport Link from \"next/link\";\n\nfunction Posts(props) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n\nPosts.getInitialProps = async context => {\n  const fs = require(\"fs\");\n\n  const files = fs.readdirSync(`${process.cwd()}/content`, \"utf-8\");\n  const blogs = files.filter(fn => fn.endsWith(\".md\"));\n  const data = blogs.map(blog => {\n    const path = `${process.cwd()}/content/${blog}`;\n    const rawContent = fs.readFileSync(path, {\n      encoding: \"utf-8\"\n    });\n    return rawContent;\n  });\n  return _objectSpread({}, data);\n};\n\nexport default Posts;","map":{"version":3,"sources":["/Users/jennyly/repos/site/pages/posts.js"],"names":["React","matter","Link","Posts","props","getInitialProps","context","fs","require","files","readdirSync","process","cwd","blogs","filter","fn","endsWith","data","map","blog","path","rawContent","readFileSync","encoding"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,IAAP,MAAiB,WAAjB;;AAEA,SAASC,KAAT,CAAeC,KAAf,EAAsB;AACrB,sBACC,qCADD;AAKA;;AAEDD,KAAK,CAACE,eAAN,GAAwB,MAAOC,OAAP,IAAmB;AAC1C,QAAMC,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,QAAMC,KAAK,GAAGF,EAAE,CAACG,WAAH,CAAgB,GAAEC,OAAO,CAACC,GAAR,EAAc,UAAhC,EAA2C,OAA3C,CAAd;AAEA,QAAMC,KAAK,GAAGJ,KAAK,CAACK,MAAN,CAAcC,EAAD,IAAQA,EAAE,CAACC,QAAH,CAAY,KAAZ,CAArB,CAAd;AAEA,QAAMC,IAAI,GAAGJ,KAAK,CAACK,GAAN,CAAWC,IAAD,IAAU;AAChC,UAAMC,IAAI,GAAE,GAAET,OAAO,CAACC,GAAR,EAAc,YAAWO,IAAK,EAA5C;AACA,UAAME,UAAU,GAAGd,EAAE,CAACe,YAAH,CAAgBF,IAAhB,EAAsB;AACxCG,MAAAA,QAAQ,EAAE;AAD8B,KAAtB,CAAnB;AAGA,WAAOF,UAAP;AACA,GANY,CAAb;AAQA,2BAAYJ,IAAZ;AACA,CAfD;;AAgBA,eAAed,KAAf","sourcesContent":["import React from 'react';\nimport matter from 'gray-matter';\nimport Link from \"next/link\";\n\nfunction Posts(props) {\n\treturn (\n\t\t<>\n\t\t\t\n\t\t</>\n\t)\n}\n\nPosts.getInitialProps = async (context) => {\n\tconst fs = require(\"fs\");\n\tconst files = fs.readdirSync(`${process.cwd()}/content`, \"utf-8\");\n\n\tconst blogs = files.filter((fn) => fn.endsWith(\".md\"));\n\n\tconst data = blogs.map((blog) => {\n\t\tconst path=`${process.cwd()}/content/${blog}`;\n\t\tconst rawContent = fs.readFileSync(path, {\n\t\t\tencoding: \"utf-8\",\n\t\t});\n\t\treturn rawContent;\n\t})\n\n\treturn { ...data };\n}\nexport default Posts"]},"metadata":{},"sourceType":"module"}