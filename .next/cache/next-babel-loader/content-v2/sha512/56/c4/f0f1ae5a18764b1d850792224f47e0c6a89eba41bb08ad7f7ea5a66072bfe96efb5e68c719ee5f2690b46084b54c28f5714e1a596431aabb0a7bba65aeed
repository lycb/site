{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport Link from \"next/link\";\n\nfunction Posts(props) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n\n_c = Posts;\n\nPosts.getInitialProps = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(context) {\n    var fs, files, blogs, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            fs = require(\"fs\");\n            files = fs.readdirSync(\"\".concat(process.cwd(), \"/content\"), \"utf-8\");\n            blogs = files.filter(function (fn) {\n              return fn.endsWith(\".md\");\n            });\n            data = blogs.map(function (blog) {\n              var path = \"\".concat(process.cwd(), \"/content/\").concat(blog);\n              var rawContent = fs.readFileSync(path, {\n                encoding: \"utf-8\"\n              });\n              return rawContent;\n            });\n            return _context.abrupt(\"return\", _objectSpread({}, data));\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default Posts;\n\nvar _c;\n\n$RefreshReg$(_c, \"Posts\");","map":{"version":3,"sources":["/Users/jennyly/repos/site/pages/posts.js"],"names":["React","Link","Posts","props","getInitialProps","context","fs","require","files","readdirSync","process","cwd","blogs","filter","fn","endsWith","data","map","blog","path","rawContent","readFileSync","encoding"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;;AAEA,SAASC,KAAT,CAAeC,KAAf,EAAsB;AACrB,sBACC,qCADD;AAKA;;KANQD,K;;AAQTA,KAAK,CAACE,eAAN;AAAA,sEAAwB,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACjBC,YAAAA,EADiB,GACZC,OAAO,CAAC,IAAD,CADK;AAEjBC,YAAAA,KAFiB,GAETF,EAAE,CAACG,WAAH,WAAkBC,OAAO,CAACC,GAAR,EAAlB,eAA2C,OAA3C,CAFS;AAIjBC,YAAAA,KAJiB,GAITJ,KAAK,CAACK,MAAN,CAAa,UAACC,EAAD;AAAA,qBAAQA,EAAE,CAACC,QAAH,CAAY,KAAZ,CAAR;AAAA,aAAb,CAJS;AAMjBC,YAAAA,IANiB,GAMVJ,KAAK,CAACK,GAAN,CAAU,UAACC,IAAD,EAAU;AAChC,kBAAMC,IAAI,aAAIT,OAAO,CAACC,GAAR,EAAJ,sBAA6BO,IAA7B,CAAV;AACA,kBAAME,UAAU,GAAGd,EAAE,CAACe,YAAH,CAAgBF,IAAhB,EAAsB;AACxCG,gBAAAA,QAAQ,EAAE;AAD8B,eAAtB,CAAnB;AAGA,qBAAOF,UAAP;AACA,aANY,CANU;AAAA,+DAcXJ,IAdW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxB;;AAAA;AAAA;AAAA;AAAA;;AAgBA,eAAed,KAAf","sourcesContent":["import React from 'react';\nimport Link from \"next/link\";\n\nfunction Posts(props) {\n\treturn (\n\t\t<>\n\t\t\t\n\t\t</>\n\t)\n}\n\nPosts.getInitialProps = async (context) => {\n\tconst fs = require(\"fs\");\n\tconst files = fs.readdirSync(`${process.cwd()}/content`, \"utf-8\");\n\n\tconst blogs = files.filter((fn) => fn.endsWith(\".md\"));\n\n\tconst data = blogs.map((blog) => {\n\t\tconst path=`${process.cwd()}/content/${blog}`;\n\t\tconst rawContent = fs.readFileSync(path, {\n\t\t\tencoding: \"utf-8\",\n\t\t});\n\t\treturn rawContent;\n\t})\n\n\treturn { ...data };\n}\nexport default Posts"]},"metadata":{},"sourceType":"module"}